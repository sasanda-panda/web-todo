{"version":3,"sources":["components/Auth/Login.tsx","components/Auth/Logout.tsx","components/Apollo/WithApolloProvider.tsx","graphql/mutations.ts","graphql/subscriptions.ts","components/Todo/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Login","loginWithPopup","useAuth0","className","onClick","Logout","logout","createApolloClient","authToken","ApolloClient","link","WebSocketLink","uri","options","reconnect","connectionParams","headers","Authorization","cache","InMemoryCache","WithApolloProvider","children","useState","client","setClient","isAuthenticated","getAccessTokenSilently","fetchIdTokenClaims","a","newApolloClient","useEffect","INSERT_TODO","gql","UPDATE_TODO_IS_DONE","DELETE_TODO","FETCH_NEW_TODOS","TodoList","title","setTitle","content","setContent","useSubscription","loading","error","data","useMutation","insertTodo","updateTodoIsDone","deleteTodo","onSubmit","eve","preventDefault","variables","onSubmitInsert","type","value","placeholder","onChange","target","todos","map","todo","is_done","id","onClickUpdate","name","defaultValue","App","domain","clientId","redirectUri","window","location","origin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7d26dfe.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nexport const Login: FC = () => {\n  const { loginWithPopup } = useAuth0();\n  return (\n    <button className=\"auth-button\" onClick={() => loginWithPopup()}>Log in</button>\n  );\n};","import React, { FC } from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nexport const Logout: FC = () => {\n  const { logout } = useAuth0();\n  return (\n    <button className=\"auth-button\" onClick={() => logout()}>Log out</button>\n  );\n};","import React, { FC, useEffect, useState} from 'react';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { Login, Logout } from '../Auth';\n\nconst createApolloClient = (authToken: string) => {\n  return new ApolloClient({\n    link: new WebSocketLink({\n      uri: \"wss://sp0483-web-todo.hasura.app/v1/graphql\",\n      options: {\n        reconnect: true,\n        connectionParams: {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        }\n      }\n    }),\n    cache: new InMemoryCache(),\n  });\n};\n\nexport const WithApolloProvider: FC = ({ children }) => {\n  const [client, setClient] = useState<any|null>(null);\n  const { isAuthenticated, getAccessTokenSilently } = useAuth0(); // getIdTokenClaims\n\n  const fetchIdTokenClaims = async () => {\n    const authToken = await getAccessTokenSilently();\n    const newApolloClient = createApolloClient(authToken);\n    setClient(newApolloClient);\n  };\n\n  useEffect(() => {\n    if (isAuthenticated) fetchIdTokenClaims();\n  }, [isAuthenticated]);\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"apollo\">\n        <Login />\n      </div>\n    );\n  };\n\n  if (!client) {\n    return (\n      <div className=\"apollo\">\n        <Logout />\n      </div>\n    );\n  };\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n      <Logout />\n    </ApolloProvider>\n  )\n};","import gql from 'graphql-tag';\n\nexport const INSERT_TODO = gql`\n  mutation insertTodo($title: String!, $content: String) {\n    insert_todos(objects: {title: $title, content: $content}) {\n      affected_rows\n    }\n  }\n`;\n\nexport const UPDATE_TODO_IS_DONE = gql`\n  mutation updateTodoIsDone($id: Int!, $is_done: Boolean) {\n    update_todos(where: {id: {_eq: $id}}, _set: {is_done: $is_done}) {\n      affected_rows\n    }\n  }\n`;\n\n// export const UPDATE_TODO_TITLE_AND_CONTENT = gql`\n//   mutation updateTodoTitleAndContent($id: Int!, $title: String, $content: String) {\n//     update_todos(where: {id: {_eq: $id}}, _set: {title: $title, content: $content}) {\n//       affected_rows\n//     }\n//   }\n// `;\n\nexport const DELETE_TODO = gql`\n  mutation deleteTodo($id: Int) {\n    delete_todos(where: {id: {_eq: $id}}) {\n      affected_rows\n    }\n  }\n`;","import gql from 'graphql-tag';\n\nexport const FETCH_NEW_TODOS = gql`\n  subscription fetchNewTodos {\n    todos(order_by: {created_at: desc}) {\n      content\n      created_at\n      id\n      is_done\n      title\n      user_id\n    }\n  }\n`;","import React, { FC, useState } from 'react';\nimport { useMutation, useSubscription } from \"@apollo/react-hooks\";\nimport { INSERT_TODO, UPDATE_TODO_IS_DONE, DELETE_TODO } from '../../graphql/mutations';\nimport { FETCH_NEW_TODOS } from '../../graphql/subscriptions';\nimport {\n  Todos,\n  InsertTodoMutation,\n  InsertTodoMutationVariables,\n  UpdateTodoIsDoneMutation,\n  UpdateTodoIsDoneMutationVariables,\n  DeleteTodoMutation,\n  DeleteTodoMutationVariables,\n  FetchNewTodosSubscription\n} from '../../graphql/types';\nimport { RiAddLine, RiCheckLine, RiDeleteBinLine } from \"react-icons/ri\";\n\nexport const TodoList: FC = () => {\n  const [title, setTitle] = useState<string>('');\n  const [content, setContent] = useState<string>('');\n\n  const { loading, error, data } = useSubscription<FetchNewTodosSubscription>(FETCH_NEW_TODOS);\n  const [insertTodo] = useMutation<InsertTodoMutation, InsertTodoMutationVariables>(INSERT_TODO);\n  const [updateTodoIsDone] = useMutation<UpdateTodoIsDoneMutation, UpdateTodoIsDoneMutationVariables>(UPDATE_TODO_IS_DONE);\n  const [deleteTodo] = useMutation<DeleteTodoMutation, DeleteTodoMutationVariables>(DELETE_TODO);\n\n  const onSubmitInsert = (eve: React.FormEvent<HTMLFormElement>) => {\n    eve.preventDefault();\n    if (!title) return;\n    insertTodo({ variables: { title, content } });\n    setTitle('');\n    setContent('');\n  };\n  const onClickUpdate = (todo: Todos) => {\n    updateTodoIsDone({ variables: { id: todo.id, is_done: !todo.is_done } });\n  };\n\n  const onClickDelete = (id: number) => {\n    deleteTodo({ variables: { id } });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"todo\"><div>Loading...</div></div>\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"todo\"><div>Error...</div></div>\n    );\n  };\n  \n  return (\n    <div className=\"todo\">\n      <form className=\"todo-form\" onSubmit={(eve) => onSubmitInsert(eve)}>\n        <input type=\"text\" value={title} placeholder=\"Enter the title\" onChange={(eve) => setTitle(eve.target.value)} />\n        <input type=\"text\" value={content} placeholder=\"Enter the content\" onChange={(eve) => setContent(eve.target.value)} />\n        <input type=\"submit\" value=\"\" />\n        <span><RiAddLine /></span>\n      </form>\n      <ul className=\"todo-list\">\n        {data?.todos.map((todo) => (\n          <li className=\"todo-item\" key={todo.id}>\n            <div className=\"todo-item__head\">\n              <div className={`todo-item__head__check ${todo.is_done && 'is-done'}`} onClick={() => onClickUpdate(todo)}><RiCheckLine /></div>\n            </div>\n            <div className=\"todo-item__body\">\n              <input type=\"text\" name=\"title\" className=\"todo-item__body__title\" defaultValue={todo.title} />\n              {todo?.content && <input type=\"text\" name=\"content\" className=\"todo-item__body__content\" defaultValue={todo.content} />}\n            </div>\n            <div className=\"todo-item__foot\">\n              <button onClick={() => onClickDelete(todo.id)}><RiDeleteBinLine /></button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};","import React from 'react';\nimport { Auth0Provider } from '@auth0/auth0-react';\nimport { WithApolloProvider } from './components/Apollo';\nimport { TodoList } from './components/Todo';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <Auth0Provider\n      domain=\"dev-fuodkz7j.us.auth0.com\"\n      clientId=\"fTOVIHQ0WCxDdJ33Z6XFZbrMpHhmeIlp\"\n      redirectUri={window.location.origin}\n    >\n      <WithApolloProvider>\n        <TodoList />\n      </WithApolloProvider>\n    </Auth0Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}